МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмної інженерії»



ЗВІТ
З Лабораторної роботи № 2
з дисципліни
«Аналіз та рефакторинг коду»


Виконав: 
ст. гр. ПЗПІ-22-8
Лопатенко В.В.

Перевірив: 
ст. викладач кат. ПІ 
Сокорчук І.П.



Харків 2024




Мета роботи: розробити базу даних для серверної частини програмної системи та прикладного програмного інтерфейсу.
Хід роботи: 
Розробити будову програмної системи.
1.	Створити UML діаграму прецедентів для серверної частини системи.
На діаграмі прецедентів для програмної системи для контролю доступу на підприємствах вказані взаємодії звичайного користувача та адміністратора і функцій системи.
 
Рисунок 1.1 – UML діаграма прецедентів

2.	Створити ER діаграму даних.
 
Рисунок 2.1 – ER діаграма даних
3.	Розробити базу даних (БД) програмної системи
У базі даних для програмної системи для контролю доступу на підприємствах було створено п’ять таблиць в які показують користувачів, сповіщення, двері, логи доступу та код доступу, нижче наведені запити для створення кожної з цих таблиць:

1 CREATE TABLE Users (
2    UserID SERIAL PRIMARY KEY,
3    Username VARCHAR(50) NOT NULL UNIQUE,
4    Password VARCHAR(255) NOT NULL, 
5    Role VARCHAR(50) NOT NULL UNIQUE,
6    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
7 );
8
9 CREATE TABLE Doors (
10    DoorID SERIAL PRIMARY KEY,
11    DoorName VARCHAR(50) NOT NULL UNIQUE,
12    Location VARCHAR(100),
13    OpenCount INT NOT NULL DEFAULT 0,
14    OpenTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
15);
16
17 CREATE TABLE AccessCodes (
18    CodeID SERIAL PRIMARY KEY,
19    DoorID INT NOT NULL,
20    AccessCode VARCHAR(20) NOT NULL,
21    IsActive BOOLEAN DEFAULT TRUE,
22    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
23    FOREIGN KEY (DoorID) REFERENCES Doors(DoorID)
24 );
25
26 CREATE TABLE AccessLogs (
27    LogID SERIAL PRIMARY KEY,
28    DoorID INT NOT NULL,
29    AccessCode VARCHAR(20),
30    AccessTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
31    FOREIGN KEY (DoorID) REFERENCES Doors(DoorID)
32 );
33
34 CREATE TABLE Messages (
35    MessageID SERIAL PRIMARY KEY,
36    UserID INT NOT NULL,
37    MessageText VARCHAR(255) NOT NULL,
38    MessageTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
39    FOREIGN KEY (UserID) REFERENCES Users(UserID)
40 );

4.	Створити діаграму структури БД

Рисунок 4.1 – Діаграма структури БД

5.	Розробити функції роботи з БД (ORM або CoRM тощо).
Були розроблені наступні функції для роботи з базою даних, а саме реєстрація користувачів, а також авторизація. Усі цбазою даних і функції взаємодіють з PostgreSQL, використовуючи SQL-запити щоб зберігати, отримувати та оновлювати дані. У додатку А наведений детальний код функцій роботи з БД.

6.	Розробити API (Rest або GraphQL, gRPC тощо) для взаємодії серверної частини з клієнтами
Для зручного та ефективного обміну даними між сервером і клієнтами створено RESTful API, яке забезпечує ключові операції з управління користувачами. Весь програмний код, що демонструє реалізацію, подано в Додатку Б.

7.	Створити програмну реалізацію розробленого АРІ та функцій роботи з БД.
Створене API дозволяє клієнтам динамічно взаємодіяти із сервером, забезпечуючи виконання таких операцій, як авторизація та реєстрація користувачів у системі. У процесі розробки використовувалися технології Node.js та Express для побудови серверної частини, PostgreSQL для роботи з базою даних, а також Swagger для створення документації.
 
Рисунок 7.1 – Розроблений API

Посилання на відео: https://youtu.be/Mdb7zdMpdms

Висновки:У процесі роботи було розроблено програмну систему для контролю доступу на підприємствах, яка включає серверну частину, базу даних і RESTful API. Було створено UML-діаграму прецедентів, ER-діаграму даних та діаграму структури бази даних. Реалізовано п’ять таблиць: Users, Doors, AccessCodes, AccessLogs та Messages, що забезпечують основний функціонал системи.
Для взаємодії серверної частини з клієнтами створено RESTful API, яке дозволяє виконувати ключові операції, такі як реєстрація, авторизація та облік доступу. У розробці використовувалися технології Node.js, Express, PostgreSQL та Swagger для документування API.
Система забезпечує стабільний обмін даними та дозволяє ефективно керувати доступом. У майбутньому можливе розширення функціоналу та інтеграція з іншими системами. Мета роботи досягнута, усі поставлені завдання виконані.
 


Додаток А – Функції роботи з БД

1  const client = require('./db'); // Підключення до бази даних
2  
3  // Функція для реєстрації користувача
4  async function registerUser(username, password, role) {
5    const query = 'INSERT INTO users (username, password, role) VALUES ($1, $2, $3) RETURNING userid, username, role';
6    const values = [username, password, role];
7    
8    try {
9      const result = await client.query(query, values);
10     return result.rows[0];
11   } catch (err) {
12     throw new Error('Помилка при реєстрації користувача: ' + err.message);
13   }
14 }
15 
16 // Функція для авторизації користувача
17 async function loginUser(username, password) {
18   const query = 'SELECT * FROM users WHERE username = $1';
19   const values = [username];
20   
21   try {
22     const result = await client.query(query, values);
23     if (result.rows.length === 0 || result.rows[0].password !== password) {
24       throw new Error('Невірний логін або пароль');
25     }
26     return result.rows[0];
27   } catch (err) {
28     throw new Error('Помилка при авторизації: ' + err.message);
29   }
30 }
31 
32 module.exports = { 
33   registerUser, 
34   loginUser
35 };
 


Додаток Б – API для взаємодії серверної частини з клієнтами

1  const express = require('express');
2  const app = express();
3  const swaggerSetup = require('./swagger');
4  const routes = require('./routes');
5  
6  // Middleware для обробки JSON
7  app.use(express.json());
8  
9  // Підключення маршрутів
10 app.use('/api', routes);
11 
12 // Підключення Swagger
13 swaggerSetup(app);
14 
15 // Запуск сервера
16 const PORT = process.env.PORT || 3000;
17 app.listen(PORT, () => {
18   console.log(`Сервер запущено на порті ${PORT}`);
19 });
20 
21 const swaggerUi = require('swagger-ui-express');
22 const swaggerDocs = require('./swaggerConfig');
23 
24 module.exports = (app) => {
25   app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocs));
26 };
27 
28 const swaggerJsDoc = require('swagger-jsdoc');
29 
30 // Swagger options
31 const swaggerOptions = {
32   swaggerDefinition: {
33     openapi: '3.0.0',
34     info: {
35       title: 'SecureAccess API',
36       version: '1.0.0',
37       description: 'API для роботи з "Програмна система для контролю доступу на підприємствах"',
38     },
39     servers: [
40       {
41         url: 'http://localhost:3000',
42         description: 'Local server',
43       },
44     ],
45   },
46   apis: ['./routes.js'], // Шлях до файлів, де знаходяться ваші маршрути
47 };
48 
49 const swaggerDocs = swaggerJsDoc(swaggerOptions);
50 
51 module.exports = swaggerDocs;
52 
53 const express = require('express');
54 const router = express.Router();
55 const { registerUser, loginUser } = require('./functions');
56 
57 /**
58  * @swagger
59  * /api/register:
60  *   post:
61  *     summary: Реєстрація нового користувача
62  *     requestBody:
63  *       required: true
64  *       content:
65  *         application/json:
66  *           schema:
67  *             type: object
68  *             properties:
69  *               username:
70  *                 type: string
71  *               password:
72  *                 type: string
73  *               role:
74  *                 type: string
75  *     responses:
76  *       200:
77  *         description: Користувач успішно зареєстрований
78  *       400:
79  *         description: Помилка при реєстрації користувача
80  */
81 router.post('/register', async (req, res) => {
82   try {
83     const { username, password, role } = req.body;
84     const user = await registerUser(username, password, role);
85     res.status(200).json(user);
86   } catch (err) {
87     res.status(400).json({ error: err.message });
88   }
89 });
90 
91 /**
92  * @swagger
93  * /api/login:
94  *   post:
95  *     summary: Авторизація користувача
96  *     requestBody:
97  *       required: true
98  *       content:
99  *         application/json:
100 *           schema:
101 *             type: object
102 *             properties:
103 *               username:
104 *                 type: string
105 *               password:
106 *                 type: string
107 *     responses:
108 *       200:
109 *         description: Успішна авторизація
110 *       401:
111 *         description: Невірний логін або пароль
112 */
113 router.post('/login', async (req, res) => {
114   try {
115     const { username, password } = req.body;
116     const user = await loginUser(username, password);
117     res.status(200).json(user);
118   } catch (err) {
119     res.status(401).json({ error: err.message });
120   }
121 });
122 
123 module.exports = router;
