МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмної інженерії»



ЗВІТ
З Лабораторної роботи № 4
з дисципліни
«Аналіз та рефакторинг коду»


Виконав: 
ст. гр. ПЗПІ-22-8
Лопатенко В.В.

Перевірив: 
ст. викладач кат. ПІ 
Сокорчук І.П.



Харків 2024





Мета роботи: На лабораторній роботі потрібно створити програму для IoT або SmartDevice, використовуючи сучасну платформу, яка підходить для розробки вбудованих систем.
Хід роботи: 
У межах проєкту було створено IoT-рішення, що взаємодіє із сервером через протокол MQTT. Система складається з кількох компонентів: сенсор HC-SR04 для вимірювання відстані, модуль для введення коду з клавіатури, клієнт для передачі даних у форматі JSON і серверна частина на Node.js. Спершу була розроблена архітектура з UML-діаграмами. Далі реалізували перевірку введеного коду, збір показників відстані та передачу інформації на сервер. Сервер обробляє отримані дані, порівнює код із записами у базі даних і виконує оновлення, якщо значення відстані не перевищують 4 см. Завершальним етапом стало тестування всіх компонентів для перевірки коректності роботи системи.
1.	Текстовий опис інженерних рішень
У межах проєкту було створено систему збору та передачі даних, яка працює на базі ESP32 з підключенням до Wi-Fi. За допомогою датчика HC-SR04 вимірюється відстань, а введення даних виконується через клавіатуру. Мікроконтролер обробляє отриману інформацію, застосовуючи алгоритми, що забезпечують точність і враховують вплив зовнішніх факторів.  
Передача даних реалізована через протокол MQTT, який гарантує швидкість і надійність доставки до сервера. Налаштування системи виконуються через інтуїтивно зрозумілий інтерфейс, що дозволяє легко змінювати параметри роботи. Сервер приймає дані для подальшого аналізу та зберігання, забезпечуючи гнучкість і стабільність роботи всієї системи.
 
Рисунок 1 – Схема IoT пристрою

2.	Фрагменти програмного коду:
	Бізнес логіки IoT клієнта  (математичної обробки повʼязаних із предметною областю даних); 
1  void setupWiFi() {
2    delay(10);
3    Serial.println();
4    Serial.print("Connecting to Wi-Fi: ");
5    Serial.println(ssid);
6    WiFi.begin(ssid, password);
7    while (WiFi.status() != WL_CONNECTED) {
8      delay(500);
9      Serial.print(".");
10    }
11    Serial.println("");
12    Serial.println("Wi-Fi connected!");
13    Serial.println(WiFi.localIP());
14 }
15 
16 float measureDistance() {
17   digitalWrite(trigPin, LOW);
18   delayMicroseconds(2);
19   digitalWrite(trigPin, HIGH);
20   delayMicroseconds(10);
21   digitalWrite(trigPin, LOW);
22   long duration = pulseIn(echoPin, HIGH);
23   float distance = duration * 0.034 / 2;
24   return distance;
25 }
26 
27 void setup() {
28   Serial.begin(115200);
29   pinMode(trigPin, OUTPUT);
30   pinMode(echoPin, INPUT);
31   setupWiFi();
32   client.setServer(mqttServer, mqttPort);
33   connectToMQTT();
34   Serial.println("Система запущена. Введите код:");
35 }
36 
37 void loop() {
38   if (!client.connected()) {
39     connectToMQTT();
40   }
41   client.loop();
42   char key = keypad.getKey();
43   if (key) {
44     if (key == '#') {
45       checkCode(inputCode);
46       inputCode = "";
47     } else if (key == '*') {
48       inputCode = "";
49       Serial.println("Ввод сброшен.");
50     } else {
51       inputCode += key;
52       Serial.print(key);
53     }
54   }
55 }
56 
57 void checkCode(String code) {
58   Serial.println();
59   Serial.println("Введенный код: " + code);
60   float distance = measureDistance();
61   if (distance > 0) {
62     String jsonPayload = "{\"doorId\": 1, \"accessCode\": \"" + code + "\", \"distance\": " + String(distance) + "}";
63     sendMQTTData("iot/sensor", jsonPayload);
64   } else {
65     Serial.println("Ошибка измерения расстояния!");
66   }
67 }



3.	Графічні ілюстрації (рисунки):
	UML діаграма прецедентів ІоТ клієнта.
Рисунок 2 – UML діаграма прецедентів ІоТ клієнта

	UML діаграма діяльності ІоТ клієнта.
 
Рисунок 3 – UML діаграма діяльності ІоТ клієнта
Висновки:
У ході лабораторної роботи було створено IoT-систему на базі ESP32, що використовує датчик HC-SR04 для вимірювання відстані та клавіатуру для введення коду. Дані передаються на сервер через протокол MQTT. Розроблено UML-діаграми для моделювання взаємодії компонентів системи.
Система ефективно вимірює відстань, перевіряє введений код і передає результат на сервер для обробки. Тестування показало стабільну роботу всіх компонентів. Рішення є надійним і може бути використане для реальних застосувань у системах контролю доступу.

Посилання на відео: https://youtu.be/GzaYzbUWD3s
