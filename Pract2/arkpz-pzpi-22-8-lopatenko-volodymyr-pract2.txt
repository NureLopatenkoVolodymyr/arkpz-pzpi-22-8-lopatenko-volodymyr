Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Катедра ПІ



Звіт з практичного заняття №2
з дисципліни «Аналіз та рефакторинг коду»



Виконав: 
ст. гр. ПЗПІ-22-8
Лопатенко В.В.

Перевірив: 
ст. викладач кат. ПІ 
Сокорчук І.П.



Харків 2024



1. Мета роботи:
Навчити студентів основним методам рефакторингу коду на основі реальних прикладів з їхніх власних програмних проєктів. Студенти повинні навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості.

2. Завдання
Студент повинен обрати 3 метода рефакторингу з книги  Мартін Р. Чистий код: створення і рефакторинг за допомогою AGILE. – ФАБУЛА, 2019. – 416 с.Навести приклади свого особистого коду (з курсових, лабораторних або інших проєктів), який потребує покращення, та продемонструвати застосування обраних методів. 3).
Кожен метод рефакторингу повинен супроводжуватись:
Описом проблеми, яку вирішує даний метод.
Кодом до і після застосування методу рефакторингу.
Поясненням переваг використаного методу.

3. Хід роботи
Було обрано 3 методи рефакторингу. У презентації (Додаток Б) наведено приклади свого особистого коду, який потребує покращення, та застосування обраних методів.

Висновки

У процесі виконання практичної роботи були вивчені три методи рефакторингу з книги Мартіна Роберта "Чистий код", які допомогли покращити якість коду. Для кожного методу було продемонстровано реальні приклади з особистих проєктів, що дозволило зрозуміти, як правильно ідентифікувати проблеми в коді та застосовувати відповідні методи для їх вирішення. Рефакторинг значно підвищує зрозумілість, ефективність та підтримуваність програмного коду.

Відео-презентація: 


ДОДАТОК А
Програмний код, використаний як приклад у презентації.

/JavaScript/

class Report {
  constructor(data) {
    this.data = data;
  }

  generate(format) {
    if (format === 'PDF') {
      console.log('Generating PDF...');
      // Логіка PDF
    } else if (format === 'HTML') {
      console.log('Generating HTML...');
      // Логіка HTML
    }
  }
}
const report = new Report(myData);
report.generate('PDF');

class Report {
  constructor(data, generator) {
    this.data = data;
    this.generator = generator;
  }

  generate() {
    this.generator.generate(this.data);
  }
}

class PDFGenerator {
  generate(data) {
    console.log('Generating PDF with data:', data);
    // Логіка PDF
  }
}

class HTMLGenerator {
  generate(data) {
    console.log('Generating HTML with data:', data);
    // Логіка HTML
  }
}

// Використання:
const report = new Report(myData, new PDFGenerator());
report.generate();

class Employee {
  constructor(type) {
    this.type = type;
  }

  calculatePay(hoursWorked) {
    if (this.type === 'hourly') {
      return hoursWorked * 20; // погодинна ставка
    } else if (this.type === 'salaried') {
      return 3000; // фіксований оклад
    }
  }
}
const employee = new Employee('hourly');
console.log(employee.calculatePay(40));

class Employee {
  constructor(payStrategy) {
    this.payStrategy = payStrategy;
  }

  calculatePay(hoursWorked) {
    return this.payStrategy.calculate(hoursWorked);
  }
}

class HourlyPay {
  calculate(hoursWorked) {
    return hoursWorked * 20;
  }
}

class SalariedPay {
  calculate() {
    return 3000;
  }
}

// Використання:
const hourlyEmployee = new Employee(new HourlyPay());
console.log(hourlyEmployee.calculatePay(40)); // 800

const salariedEmployee = new Employee(new SalariedPay());
console.log(salariedEmployee.calculatePay()); // 3000

function getAndRemoveOrder(orders, orderId) {
  const order = orders.find(o => o.id === orderId);
  orders = orders.filter(o => o.id !== orderId);
  return order;
}
const order = getAndRemoveOrder(orderList, 123);

function getOrder(orders, orderId) {
  return orders.find(o => o.id === orderId);
}

function removeOrder(orders, orderId) {
  return orders.filter(o => o.id !== orderId);
}

// Використання:
const order = getOrder(orderList, 123);
orderList = removeOrder(orderList, 123);



ДОДАТОК Б
Презентація на тему «Методи рефакторингу коду програмного забезпечення».



Виконав ст. гр. ПЗПІ-22-8 Лопатенко Володимир


Вступ
Що таке рефакторинг?
Це процес покращення існуючого коду без зміни його зовнішньої поведінки.
Чому це важливо?
Підвищення читабельності.
Спрощення розширення та підтримки.
Зменшення кількості помилок.
Обрані методи:
Tease Apart Inheritance
Replace Type Code with State/Strategy
Separate Query from Modifier

Метод 1 - Tease Apart Inheritance
Опис проблеми:
Клас об’єднує надто багато відповідальностей.
Логіка різних типів об’єктів починає змішуватись.
Порушується принцип єдиної відповідальності (SRP).
Код до рефакторингу
Цей код з проекту, де створюється API для генерації звітів:
Проблема:
Метод generate обробляє логіку кількох форматів, що ускладнює додавання нових.

Код після рефакторингу
Переваги:
Легке додавання нових форматів (JSON, CSV).
Менше дублювання коду.
Краще дотримання принципів SOLID.

Метод 2 - Replace Type Code with State/Strategy
Опис проблеми:
В коді є умовні конструкції (switch, if-else) для різних типів поведінки.
Це створює жорстке зв’язування і ускладнює підтримку.
Код до рефакторингу
Наприклад, модуль для розрахунку зарплат:
Проблема:
Додати новий тип співробітника потребує зміни існуючого коду.

Код після рефакторингу
Переваги:
Легке додавання нових стратегій.
Код стає більш модульним і гнучким.

Метод 3 - Separate Query from Modifier
Опис проблеми:
Методи, які одночасно повертають значення і змінюють стан, важко тестувати та розуміти.
Код до рефакторингу
Сервіс для управління замовленнями:
Проблема:
Метод одночасно змінює список замовлень і повертає значення, що порушує принцип єдиної відповідальності.

Код після рефакторингу
Переваги:
Чіткий розподіл відповідальностей.
Простота тестування.
Зменшення ймовірності побічних ефектів.

Висновки
Tease Apart Inheritance
Розділення відповідальностей у класах дозволяє уникати перевантаження логіки.
Покращується підтримка коду, оскільки нові функції легко додаються без змін у базовому класі.
В результаті код стає більш гнучким, модульним та відповідним принципам SRP і Open/Closed.

Replace Type Code with State/Strategy
Усунення умовних конструкцій спрощує розширення функціональності.
Кожен тип поведінки ізолюється в окремому класі, що зменшує ризик помилок та дублювання коду.
Дотримання принципу SOLID підвищує читабельність та масштабованість.

Separate Query from Modifier
Розділення запитів і модифікацій забезпечує кращу прозорість функцій.
Полегшується тестування коду завдяки уникненню змін стану у функціях, що лише повертають значення.
Код стає більш зрозумілим для інших розробників та простішим для підтримки.

Правильний підхід до рефакторингу зменшує технічний борг, робить проєкт стабільним і готовим до розширення в майбутньому.

СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ
Fowler, M. (2019). Clean Code: A Handbook of Agile Software Craftsmanship. Prentice Hall.
Beck, K., Brant, J., Gamma, E., & others. (2019). Refactoring: Improving the Design of Existing Code. Addison-Wesley.
"SOLID Principles" — https://en.wikipedia.org/wiki/SOLID.