МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмної інженерії»



ЗВІТ
З Лабораторної роботи № 5
з дисципліни
«Аналіз та рефакторинг коду»


Виконав: 
ст. гр. ПЗПІ-22-8
Лопатенко В.В.

Перевірив: 
ст. викладач кат. ПІ 
Сокорчук І.П.



Харків 2024






Мета роботи: розгорнити програмну систему та продемонструвати її роботу
Хід роботи: 
У ході виконання  було розгорнуто програмну систему, що використовує датчики для вимірювання дистанції спереду та ззаду автомобіля. Система була успішно інтегрована з MQTT-брокером, забезпечуючи передачу зібраних даних на сервер для подальшої обробки та зберігання.
Датчики коректно вимірюють дистанції, результати вимірювань формуються у форматі JSON та публікуються в MQTT-топік. На сервері дані успішно приймаються, що підтверджує стабільну роботу програмної системи.
Вимоги середовища та компоненти:
Вимоги до середовища
1.	Операційна система - Windows 10/11, macOS, або Linux (Ubuntu, Debian, тощо).
2.	Node.js - Версія Node.js: 16.x або вище. Використовується для запуску серверного коду на базі Express.js.
3.	PostgreSQL - Версія PostgreSQL: 12.x або вище. Використовується як база даних для зберігання інформації про користувачів, двері, коди доступу тощо.
4.	MQTT Broker - Використовується публічний MQTT-брокер broker.hivemq.com для обміну повідомленнями між IoT-пристроями та сервером.
5.	Інтернет-з'єднання - Необхідне для роботи з MQTT-брокером та зовнішніми сервісами.


Компоненти проекту
1.	Backend (Node.js + Express.js):
•	Express.js: Фреймворк для створення REST API.
•	Swagger: Для документації API та інтерактивного тестування.
•	JWT (JSON Web Tokens): Для автентифікації та авторизації користувачів.
•	MQTT.js: Для підключення до MQTT-брокеру та обробки повідомлень від IoT-пристроїв.
•	pg (PostgreSQL Client): Для взаємодії з базою даних PostgreSQL.
2.	База даних (PostgreSQL):
•	Таблиці:
•	users: Зберігає інформацію про користувачів (логін, пароль, роль).
•	doors: Зберігає інформацію про двері (назва, місцезнаходження, кількість відкриттів).
•	access_codes: Зберігає коди доступу для дверей.
•	access_logs: Логує спроби доступу до дверей.
3.	IoT-пристрій (ESP32):
•	Wi-Fi: Для підключення до мережі.
•	HC-SR04: Ультразвуковий датчик для вимірювання відстані.
•	Keypad: Для введення коду доступу.
•	MQTT Client: Для відправки даних на сервер.
4.	Документація API (Swagger):
•	Swagger UI: Для візуалізації та тестування API.
•	Swagger JSDoc: Для генерації документації на основі коментарів у коді.

Висновки:  У ході лабораторної роботи була успішно розгорнута програмна система, що використовує IoT-пристрій на базі ESP32 для вимірювання дистанції за допомогою датчиків HC-SR04. Дані про відстань передавалися через MQTT-брокер до серверної частини на Node.js, де вони оброблялись і зберігались у базі даних PostgreSQL.
Система показала стабільну роботу: датчики коректно вимірювали відстань, результати виводились у форматі JSON і публікувались в MQTT-топік. Сервер успішно приймав і обробляв ці дані. Використання MQTT забезпечило надійну та ефективну передачу даних. У результаті виконання лабораторної роботи було досягнуто поставленої мети — демонстрація роботи програмної системи з інтеграцією IoT-пристроїв і серверної частини через MQTT.

Посилання на відео: 
