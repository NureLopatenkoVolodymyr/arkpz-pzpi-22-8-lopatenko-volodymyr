Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Катедра ПІ



Звіт з практичного заняття №1
з дисципліни «Аналіз та рефакторинг коду»



Виконав: 
ст. гр. ПЗПІ-22-8
Лопатенко В.В.

Перевірив: 
ст. викладач кат. ПІ 
Сокорчук І.П.



Харків 2024



1. Мета роботи:
Ознайомитися з рефакторінгом коду на обраній мові програмування. Набути навичок з рефакторінгу коду для покращення якості.

2. Завдання
Обрати мову програмування, дослідити основні рекомендації для написання якісного коду у цій мові, продемонструвати ці рекомендації на прикладах коду, обґрунтувати кожну рекомендацію і надати детальні пояснення. Для кожного прикладу мають бути наведені фрагменти коду.

3. Хід роботи
Було обрано мову програмування Haskell. У презентації (Додаток Б) наведено основні рекомендації щодо оформлення програмного коду з описами, а також приклад коду (Додаток А) до і після застосування цих рекомендацій.

Висновки

У ході практичної роботи було вивчено рефакторинг коду на мові Haskell, зокрема рекомендації щодо покращення читабельності, організації функцій та іменування змінних. На прикладах коду було продемонстровано, як ці рекомендації покращують структуру та ефективність програми. Рефакторинг допомагає знизити кількість помилок і підвищити підтримуваність коду.

Відео-презентація: 


ДОДАТОК А
Програмний код, використаний як приклад у презентації.

/Haskell/

-- Поганий приклад 
f x = x + 1 

-- Гарний приклад 
incrementNumber number = number + 1

-- Поганий приклад 
processData lst = map (\x -> x * 2 + 3) (filter (> 0) lst) 

-- Гарний приклад 
filterPositive lst = filter (> 0) lst 
transform x = x * 2 + 3 
processData lst = map transform (filterPositive lst)

-- Поганий приклад 
main = do putStrLn "Enter your name" 
name <- getLine 
putStrLn ("Hello, " ++ name)

 -- Гарний приклад 
main = do putStrLn "Enter your name" 
         name <- getLine 
         putStrLn ("Hello, " ++ name)

-- Поганий приклад 
reverseList [] = [] reverseList (x:xs) = reverseList xs ++ [x]

 -- Гарний приклад 
import Data.List (reverse) 
main = print (reverse [1, 2, 3, 4])

-- Поганий приклад 
calculateAreaCircle r = pi * r^2 
calculateAreaSquare s = s^2 

-- Гарний приклад 
calculateArea shape = case shape of 
    Circle r -> pi * r^2 
    Square s -> s^2

-- Поганий приклад 
counter = 0 
increment x = counter + x
 
-- Гарний приклад 
increment x = x + 1

-- Поганий приклад 
area r = pi * r^2 

-- Гарний приклад 
area :: Double -> Double 
area radius = pi * radius^2

Обчислює площу круга за заданим радіусом 
area :: Double -> Double 
area radius = pi * radius^2



ДОДАТОК Б
Презентація на тему «Основні рекомендації для ефективного написання коду на Haskell».


ПРАВИЛА ОФОРМЛЕННЯ ПРОГРАМНОГО КОДУ

Виконав ст. гр. ПЗПІ-22-8 Лопатенко Володимир


Вступ: Особливості мови Haskell
Haskell — це функціональна мова програмування, що була створена в кінці 1980-х років для досліджень та практичного використання функціонального програмування.Ключові особливості мови:
Функціональна парадигма — Haskell дозволяє описувати програму як набір функцій, де кожна функція приймає аргументи та повертає значення.
Ледачі обчислення (lazy evaluation) — вирази обчислюються лише тоді, коли їх значення дійсно потрібне.
Чисті функції — функція завжди повертає одне й те саме значення для одних і тих самих вхідних даних, що зменшує ймовірність побічних ефектів.
Сувора статична типізація — компілятор перевіряє типи ще до виконання програми, що дозволяє уникати багатьох помилок.
Синтаксис на основі відступів — структура коду визначається за допомогою відступів (подібно до Python).

Рекомендація 1: Використовуйте осмислені назви функцій, змінних та типів
Опис: Назви мають чітко передавати суть дій або даних. Це особливо важливо у Haskell, оскільки короткі функції часто зустрічаються, і важливо розуміти їх призначення без додаткових пояснень.
Чому це важливо: Читабельність коду покращується, і його легше підтримувати в майбутньому.

Рекомендація 2: Розбивайте складні функції на підфункції
Опис: Розділяйте складні обчислення на невеликі логічні блоки. Це спрощує розуміння та тестування функцій.
Чому це важливо: Зменшується когнітивне навантаження, і код стає легшим для дебагу.

Рекомендація 3: Дотримуйтеся стилю вирівнювання коду
Опис: У Haskell вирівнювання (indentation) є важливим не лише для читабельності, але й для коректного виконання коду, адже це синтаксично значущо.
Чому це важливо: Чітка структура допомагає уникнути помилок і покращує сприйняття коду.

Рекомендація 4: Використовуйте стандартні бібліотеки
Опис: Використовуйте бібліотеки Haskell (наприклад, Data.List) для базових операцій замість написання власних функцій.
Чому це важливо: Економить час і знижує ймовірність помилок, оскільки стандартні функції оптимізовані та протестовані.

Рекомендація 5: Уникайте дублювання коду
Опис: Створюйте функції для повторюваних частин коду замість копіювання логіки.
Чому це важливо: Полегшується оновлення коду, оскільки зміни потрібно вносити лише в одному місці.

Рекомендація 6: Дотримуйтеся принципів чистоти функцій
Опис: Уникайте побічних ефектів у функціях, що обчислюють значення. Чисті функції легше тестувати й розуміти.
Чому це важливо: Код стає передбачуванішим і його простіше інтегрувати в більші проекти.

Рекомендація 7: Використовуйте розгорнуті типи для кращого розуміння коду
Опис: Використання типів допомагає зменшити кількість помилок і забезпечує самоописовість коду.
Чому це важливо: Статична типізація забезпечує безпеку та чіткість коду.

Рекомендація 8: Документуйте код
Опис: Додавайте коментарі для складних частин коду або пояснюйте призначення функцій.
Чому це важливо: Полегшується читання коду іншими розробниками (або вами у майбутньому).

Висновки
Дотримання рекомендацій робить код зрозумілішим, підтримуваним і надійним.
Використання стандартних бібліотек і дотримання чистоти функцій значно спрощує розробку.
Читабельність коду впливає на ефективність роботи в команді та підтримку проєктів у довгостроковій перспективі.

СПИСОК ВИКОРИСТАНИХ ДЖЕРЕЛ
"Haskell Programming from First Principles" — Christopher Allen.
"Learn You a Haskell for Great Good!" — Miran Lipovača.
"Real World Haskell" — Bryan O'Sullivan, John Goerzen, Don Stewart.
"Refactoring to Patterns" — Joshua Kerievsky.